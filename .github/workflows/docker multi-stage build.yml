name: docker multi-stage build

on:
  push:
    branches: [ test/deployV2 ] # 어디에 push 되었을 때 실행 될 지 지정

  # https://github.com/marketplace/actions/build-and-push-docker-images

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    steps:
      # https://github.com/marketplace/actions/build-and-push-docker-images
      # 로그인
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 관련 설정 적용
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build 및 Push
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: ./docker/Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest


  # Ec2 에 배포
  deploy-to-ec2:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    # https://github.com/marketplace/actions/ssh-remote-commands
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # 기존 컨테이너 중지 및 제거
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            
            # 모든 컨테이너를 강제로 제거
            sudo docker rm -f $(sudo docker ps -aq)
            
            # 새 이미지 Pull 및 실행
            sudo docker pull ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest

            # 컨테이너 실행
            cd ~
            
            sudo docker-compose up -d
            sudo docker image prune -f
